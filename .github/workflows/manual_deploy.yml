# This is a basic workflow to help you get started with Actions

name: Manual deploy test

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      branch_to_deploy:
        description: "[REQUIRED] Branch to deploy"
        required: true
        default: master
      env_to_deploy:
        description: "[REQUIRED] ENV to deploy"
        required: true
        default: dev

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: "Validate input branch to deploy"
        run: |
          git branch | grep -w ${{ github.event.inputs.branch_to_deploy }}
          if [[ $? -ne 0 ]]
          then echo "No such branch exists: ${{ github.event.inputs.branch_to_deploy }}. Please, specify correct one." && exit 1
          fi
      
      - name: "Validate input env to deploy"
        run: |
          export ENV_TO_DEPLOY=${{ github.event.inputs.env_to_deploy }}
          if [[ $ENV_TO_DEPLOY != "dev" && $ENV_TO_DEPLOY != "dev2" && $ENV_TO_DEPLOY != "dev3" ]]
          then echo "Env to deploy can be dev, dev2 or dev3!" && exit 1
          fi    
          
      - name: "Get env data"
        id: get_env_data
        run: |
          JSON=$(jq --arg inputEnv "${{ github.event.inputs.env_to_deploy }}" 'map(. | select(.deployEnv==$inputEnv) ) | .[0]' .github/workflows/test.json)
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "JSON=$JSON"
          echo "::set-output name=deployment_env::$JSON"
        
      - name: "Set env data"
        run: |
          env_data=${{ fromJson(steps.get_env_data.outputs.deployment_env) }}
          echo "env_data=$env_data"
          echo ${{ env_data.port }}

          
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world! 

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo "port=${{ env.PORT }}"          
